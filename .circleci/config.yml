version: 2
jobs:
  build:
    working_directory: /tmp/build
    docker:
      - image: spikerlabs/scala-sbt:scala-2.12.2-sbt-0.13.13
    steps:
      - checkout
      - run:
          name: install git
          command: apk add --no-cache git
      - run:
          name: Run tests
          command: sbt "api/test"
      - run:
          name: Build API Client and store it as an artifact
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then

              # create folders for the artifacts
              mkdir api-client-js/src/main/resources/localbuild
              mkdir api-client-js/src/main/resources/localbuild/lib

              # build
              sbt "apiClientJs/fullOptJS"
              cd api-client-js
              cp -f target/scala-2.12/api-client-js-opt.js src/main/resources/localbuild/lib/index.js
              cd ..

              # store version
              sbt version
              sbt -no-colors --info ";project apiClientJs; version" | tail -1 | sed 's/\[info\][^0-9a-zA-Z]*//' | sed 's/\-[a-zA-Z].*$//' > version-of-api-client-js
              git describe --tags > version-of-backend

              # prepare artifacts
              cd api-client-js/src/main/resources
              sed "s/%%VERSION%%/$(cat "/tmp/build/version-of-api-client-js")/" package.template.json > localbuild/package.json
              cp index.js   localbuild/index.js
              cp index.d.ts localbuild/index.d.ts
            else
              touch api-client-js/src/main/resources/localbuild
              touch version-of-api-client-js
              touch version-of-backend
            fi
      - persist_to_workspace:
          root: api-client-js/src/main/resources
          paths:
            - localbuild
      - persist_to_workspace:
          root: .
          paths:
            - version-of-api-client-js
            - version-of-backend
      - setup_remote_docker
      - deploy:
          name: Publish API image to Docker Hub
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              apk add --no-cache docker
              docker login -u ${DOCKER_LOGIN} -p ${DOCKER_PASSWORD}
              sbt docker:publish
            fi
  publish_api_client:
    working_directory: /
    docker:
      - image: node:6
    steps:
      - attach_workspace:
          at: /tmp
      - run:
          name: Pack the npm package
          command: cd /tmp/localbuild && npm pack
      - run:
          name: Authenticate with NPM
          command: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
      - run:
          name: Publish npm package to repository
          command: npm publish $(ls /tmp/localbuild/scala-fun-client-*.tgz)
  deploy_to_gce:
    working_directory: /
    docker:
      - image: google/cloud-sdk:159.0.0-slim
    steps:
      - attach_workspace:
          at: /tmp
      - run:
          name: Authenticate
          command: |
            echo $GCE_SERVICE | base64 -d > ${HOME}/gcloud-service-key.json
            export GOOGLE_APPLICATION_CREDENTIALS=${HOME}/gcloud-service-key.json
            gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json
      - run:
          name: Install Kube Control
          command: apt-get install -y kubectl
      - run:
          name: Select cluster
          command: |
            gcloud config set project pairing-buddy
            gcloud container clusters get-credentials spikerlabs --zone europe-west2-a --project spikerlabs
      - run:
          name: Deploy
          command: |
            export VERSION_TO_DEPLOY=$(cat "/tmp/version-of-backend")
            kubectl set image deployments/scala-fun-backend scala-fun-backend=spikerlabs/scala-fun-backend:$VERSION_TO_DEPLOY
workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build
      - publish_api_client:
          requires:
            - build
          filters:
            branches:
              only: master
      - deploy_to_gce:
          requires:
            - build
            - publish_api_client
          filters:
            branches:
              only: master
